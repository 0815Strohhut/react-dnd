{"version":3,"sources":["webpack:///./src/examples/04 Sortable/Cancel on Drop Outside/ItemTypes.ts","webpack:///./src/examples/04 Sortable/Cancel on Drop Outside/Card.tsx","webpack:///./src/examples/04 Sortable/Cancel on Drop Outside/Container.tsx","webpack:///./src/examples/04 Sortable/Cancel on Drop Outside/index.tsx","webpack:///./src/pages/examples/sortable/cancel-on-drop-outside.tsx","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/immutability-helper/index.js"],"names":["ItemTypes","style","border","padding","marginBottom","backgroundColor","cursor","Card","render","_this$props","this","props","text","isDragging","connectDragSource","connectDropTarget","opacity","react","Object","assign","React","DropTarget","canDrop","hover","monitor","draggedId","getItem","id","overId","overIndex","findCard","index","moveCard","connect","dropTarget","DragSource","beginDrag","originalIndex","endDrag","_monitor$getItem","droppedId","didDrop","dragSource","update","require","width","Container","_this","_React$Component","call","bind","assertThisInitialized_default","state","cards","_this2","map","card","Cancel_on_Drop_Outside_Card","key","atIndex","_this$findCard","setState","$splice","filter","c","indexOf","drop","SortableCancelOnDropOutside","href","Cancel_on_Drop_Outside_Container","__webpack_exports__","layout","Cancel_on_Drop_Outside_SortableCancelOnDropOutside","invariant","__webpack_require__","hasOwnProperty","prototype","splice","Array","toString","type","obj","slice","target","source","getAllKeys","forEach","getOwnPropertySymbols","keys","concat","copy","object","isArray","constructor","length","Map","Set","getPrototypeOf","create","newContext","commands","defaultCommands","extend","directive","fn","isEquals","a","b","spec","$apply","join","nextObject","objectWasNextObject","nextValueForKey","get","nextObjectValue","set","$push","value","invariantPushAndUnshift","$unshift","originalObject","invariantSplice","invariantSplices","args","apply","$set","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","$add","invariantMapOrSet","pair","has","add","$remove","delete","$merge","specValue","original","contextForExport","command","typeOfTarget","module","exports","default"],"mappings":"kLAAeA,SACR,QCUDC,EAAQ,CACbC,OAAQ,kBACRC,QAAS,cACTC,aAAc,QACdC,gBAAiB,QACjBC,OAAQ,QA+CHC,4FACEC,kBAAS,IAAAC,EAMXC,KAAKC,MAJRC,EAFcH,EAEdG,KACAC,EAHcJ,EAGdI,WACAC,EAJcL,EAIdK,kBACAC,EALcN,EAKdM,kBAEKC,EAAUH,EAAa,EAAI,EAEjC,OACCC,GACAC,GACAD,EACCC,EAAkBE,EAAA,qBAAKhB,MAAKiB,OAAAC,OAAA,GAAOlB,EAAP,CAAce,aAAYJ,SAdvCQ,aAoBJC,uBAAWrB,EA9CP,CAClBsB,QADkB,WAEjB,OAAO,GAGRC,MALkB,SAKZZ,EAAkBa,GAA4B,IACvCC,EAAcD,EAAQE,UAA1BC,GACIC,EAAWjB,EAAfgB,GAER,GAAIF,IAAcG,EAAQ,KACVC,EAAclB,EAAMmB,SAASF,GAApCG,MACRpB,EAAMqB,SAASP,EAAWI,MAmCyB,SAAAI,GAAO,MAAK,CACjElB,kBAAmBkB,EAAQC,eADbb,CAGdc,qBAAWnC,EAnEO,CAClBoC,UADkB,SACRzB,GACT,MAAO,CACNgB,GAAIhB,EAAMgB,GACVU,cAAe1B,EAAMmB,SAASnB,EAAMgB,IAAII,QAI1CO,QARkB,SAQV3B,EAAkBa,GAA4B,IAAAe,EACZf,EAAQE,UAArCc,EADyCD,EAC7CZ,GAAeU,EAD8BE,EAC9BF,cACPb,EAAQiB,WAGvB9B,EAAMqB,SAASQ,EAAWH,KAsDW,SAACJ,EAAST,GAAV,MAAuB,CAC7DV,kBAAmBmB,EAAQS,aAC3B7B,WAAYW,EAAQX,eAFrBsB,CAGI5B,ICrFCoC,EAASC,EAAQ,KAEjB3C,EAAQ,CACb4C,MAAO,KAiBFC,cACL,SAAAA,EAAYnC,GAAuB,IAAAoC,EAAA,OAClCA,EAAAC,EAAAC,KAAAvC,KAAMC,IAAND,MACKsB,SAAWe,EAAKf,SAASkB,KAAdC,QAAAJ,KAChBA,EAAKjB,SAAWiB,EAAKjB,SAASoB,KAAdC,QAAAJ,KAChBA,EAAKK,MAAQ,CACZC,MAAO,CACN,CACC1B,GAAI,EACJf,KAAM,2BAEP,CACCe,GAAI,EACJf,KAAM,0BAEP,CACCe,GAAI,EACJf,KAAM,gBAEP,CACCe,GAAI,EACJf,KAAM,wBAEP,CACCe,GAAI,EACJf,KAAM,yCAEP,CACCe,GAAI,EACJf,KAAM,OAEP,CACCe,GAAI,EACJf,KAAM,YAhCyBmC,sCAsC5BvC,kBAAS,IAAA8C,EAAA5C,KACPK,EAAsBL,KAAKC,MAA3BI,kBACAsC,EAAU3C,KAAK0C,MAAfC,MAER,OACCtC,GACAA,EACCE,EAAA,qBAAKhB,MAAOA,GACVoD,EAAME,IAAI,SAAAC,GAAI,OACdvC,EAAA,cAACwC,EAAD,CACCC,IAAKF,EAAK7B,GACVA,GAAI6B,EAAK7B,GACTf,KAAM4C,EAAK5C,KACXoB,SAAUsB,EAAKtB,SACfF,SAAUwB,EAAKxB,kBAQbE,kBAASL,EAAYgC,GAAiB,IAAAC,EACrBlD,KAAKoB,SAASH,GAA9B6B,EADqCI,EACrCJ,KAAMzB,EAD+B6B,EAC/B7B,MACdrB,KAAKmD,SACJlB,EAAOjC,KAAK0C,MAAO,CAClBC,MAAO,CACNS,QAAS,CAAC,CAAC/B,EAAO,GAAI,CAAC4B,EAAS,EAAGH,WAM/B1B,kBAASH,GAAY,IACpB0B,EAAU3C,KAAK0C,MAAfC,MACFG,EAAOH,EAAMU,OAAO,SAAAC,GAAC,OAAIA,EAAErC,KAAOA,IAAI,GAE5C,MAAO,CACN6B,OACAzB,MAAOsB,EAAMY,QAAQT,QA9EApC,aAmFTC,uBAAWrB,EAjGP,CAClBkE,KADkB,cAiGmC,SAAAjC,GAAO,MAAK,CACjElB,kBAAmBkB,EAAQC,eADbb,CAEXyB,GC1GiBqB,4FACb3D,kBACN,OACCS,EAAA,yBACCA,EAAA,uBACCA,EAAA,uBACCA,EAAA,mBAAGmD,KAAK,qIAAR,uBAKFnD,EAAA,2NAG0D,IACzDA,EAAA,oCAJD,8CAIqE,IACpEA,EAAA,uCALD,8BAKmD,IAClDA,EAAA,+CAND,iFASAA,EAAA,cAACoD,EAAD,WApBqDjD,sBCC1CkD,EAAA,iBAAC3D,GAAD,OACdM,EAAA,cAACsD,EAAA,EAAW5D,EACXM,EAAA,cAACuD,EAAD,6BCNF,IAAAC,EAAgBC,EAAQ,IAExBC,EAAAzD,OAAA0D,UAAAD,eACAE,EAAAC,MAAAF,UAAAC,OAEAE,EAAA7D,OAAA0D,UAAAG,SACAC,EAAA,SAAAC,GACA,OAAAF,EAAA9B,KAAAgC,GAAAC,MAAA,OAGA/D,EAAAD,OAAAC,QAAA,SAAAgE,EAAAC,GAMA,OALAC,EAAAD,GAAAE,QAAA,SAAA5B,GACAiB,EAAA1B,KAAAmC,EAAA1B,KACAyB,EAAAzB,GAAA0B,EAAA1B,MAGAyB,GAGAE,EAAA,mBAAAnE,OAAAqE,sBACA,SAAAN,GAAiB,OAAA/D,OAAAsE,KAAAP,GAAAQ,OAAAvE,OAAAqE,sBAAAN,KACjB,SAAAA,GAA4C,OAAA/D,OAAAsE,KAAAP,IAG5C,SAAAS,EAAAC,GACA,GAAAb,MAAAc,QAAAD,GACA,OAAAxE,EAAAwE,EAAAE,YAAAF,EAAAG,QAAAH,GACG,WAAAX,EAAAW,GACH,WAAAI,IAAAJ,GACG,WAAAX,EAAAW,GACH,WAAAK,IAAAL,GACG,GAAAA,GAAA,iBAAAA,EAAA,CACH,IAAAf,EAAA1D,OAAA+E,eAAAN,GACA,OAAAxE,EAAAD,OAAAgF,OAAAtB,GAAAe,GAEA,OAAAA,EAIA,SAAAQ,IACA,IAAAC,EAAAjF,EAAA,GAA0BkF,GAM1B,OALA1D,EAAA2D,OAAA,SAAAC,EAAAC,GACAJ,EAAAG,GAAAC,GAEA7D,EAAA8D,SAAA,SAAAC,EAAAC,GAAoC,OAAAD,IAAAC,GAEpChE,EAEA,SAAAA,EAAAgD,EAAAiB,GACA,mBAAAA,IACAA,EAAA,CAAcC,OAAAD,IAGd9B,MAAAc,QAAAD,IAAAb,MAAAc,QAAAgB,IACAnC,GACAK,MAAAc,QAAAgB,GACA,8LAMAnC,EACA,iBAAAmC,GAAA,OAAAA,EACA,+JAGA1F,OAAAsE,KAAAY,GAAAU,KAAA,OAGA,IAAAC,EAAApB,EA8BA,OA5BAN,EAAAuB,GAAAtB,QAAA,SAAA5B,GACA,GAAAiB,EAAA1B,KAAAmD,EAAA1C,GAAA,CACA,IAAAsD,EAAArB,IAAAoB,EACAA,EAAAX,EAAA1C,GAAAkD,EAAAlD,GAAAqD,EAAAH,EAAAjB,GACAqB,GAAArE,EAAA8D,SAAAM,EAAApB,KACAoB,EAAApB,OAEO,CACP,IAAAsB,EACA,QAAAjC,EAAAW,GACAhD,EAAAgD,EAAAuB,IAAAxD,GAAAkD,EAAAlD,IACAf,EAAAgD,EAAAjC,GAAAkD,EAAAlD,IACAyD,EACA,QAAAnC,EAAA+B,GACAA,EAAAG,IAAAxD,GACAqD,EAAArD,GACAf,EAAA8D,SAAAQ,EAAAE,UAAA,IAAAF,GAAAtC,EAAA1B,KAAA0C,EAAAjC,MACAqD,IAAApB,IACAoB,EAAArB,EAAAC,IAEA,QAAAX,EAAA+B,GACAA,EAAAK,IAAA1D,EAAAuD,GAEAF,EAAArD,GAAAuD,MAKAF,GAKA,IAAAV,EAAA,CACAgB,MAAA,SAAAC,EAAAP,EAAAH,GAEA,OADAW,EAAAR,EAAAH,EAAA,SACAU,EAAAxB,OAAAiB,EAAAtB,OAAA6B,GAAAP,GAEAS,SAAA,SAAAF,EAAAP,EAAAH,GAEA,OADAW,EAAAR,EAAAH,EAAA,YACAU,EAAAxB,OAAAwB,EAAA7B,OAAAsB,MAEAjD,QAAA,SAAAwD,EAAAP,EAAAH,EAAAa,GAOA,OAiGA,SAAAH,EAAAV,GACAnC,EACAK,MAAAc,QAAA0B,GACA,iDACAA,GAEAI,EAAAd,EAAA,SA7GAe,CAAAZ,EAAAH,GACAU,EAAAhC,QAAA,SAAAsC,GACAF,EAAAE,GACAb,IAAAU,GAAAG,EAAA9B,SAAAiB,EAAArB,EAAA+B,IACA5C,EAAAgD,MAAAd,EAAAa,KAEAb,GAEAe,KAAA,SAAAR,EAAAP,EAAAH,GAEA,OAuHA,SAAAA,GACAnC,EACA,IAAAvD,OAAAsE,KAAAoB,GAAAd,OACA,wDA3HAiC,CAAAnB,GACAU,GAEAU,QAAA,SAAAC,EAAAlB,GACAmB,EAAAD,EAAA,WACA,IAAAE,EAAAF,EAAAnC,OAAAJ,EAAAqB,KAMA,OAJAkB,EAAA3C,QAAA,SAAAH,GACAgD,EAAAhD,IAAA4B,EAAA5B,KAGAgD,GAEAC,OAAA,SAAAd,EAAAP,EAAAH,EAAAa,GAQA,OAPAS,EAAAZ,EAAA,UACAA,EAAAhC,QAAA,SAAA5B,GACAxC,OAAAyD,eAAA1B,KAAA8D,EAAArD,KACAqD,IAAAU,IAAAV,EAAArB,EAAA+B,WACAV,EAAArD,MAGAqD,GAEAsB,KAAA,SAAAf,EAAAP,EAAAH,EAAAa,GAgBA,OAfAa,EAAAvB,EAAA,QACAmB,EAAAZ,EAAA,QACA,QAAAtC,EAAA+B,GACAO,EAAAhC,QAAA,SAAAiD,GACA,IAAA7E,EAAA6E,EAAA,GACAjB,EAAAiB,EAAA,GACAxB,IAAAU,GAAAV,EAAAG,IAAAxD,KAAA4D,IAAAP,EAAArB,EAAA+B,IACAV,EAAAK,IAAA1D,EAAA4D,KAGAA,EAAAhC,QAAA,SAAAgC,GACAP,IAAAU,GAAAV,EAAAyB,IAAAlB,KAAAP,EAAArB,EAAA+B,IACAV,EAAA0B,IAAAnB,KAGAP,GAEA2B,QAAA,SAAApB,EAAAP,EAAAH,EAAAa,GAOA,OANAa,EAAAvB,EAAA,WACAmB,EAAAZ,EAAA,WACAA,EAAAhC,QAAA,SAAA5B,GACAqD,IAAAU,GAAAV,EAAAyB,IAAA9E,KAAAqD,EAAArB,EAAA+B,IACAV,EAAA4B,OAAAjF,KAEAqD,GAEA6B,OAAA,SAAAtB,EAAAP,EAAAH,EAAAa,GA6EA,IAAAtC,EAAA0D,EArEA,OAqEA1D,EA5EA4B,EA6EAtC,GADAoE,EA5EAvB,IA8EA,iBAAAuB,EACA,2DACAA,GAEApE,EACAU,GAAA,iBAAAA,EACA,6DACAA,GApFAE,EAAAiC,GAAAhC,QAAA,SAAA5B,GACA4D,EAAA5D,KAAAqD,EAAArD,KACAqD,IAAAU,IAAAV,EAAArB,EAAA+B,IACAV,EAAArD,GAAA4D,EAAA5D,MAGAqD,GAEAF,OAAA,SAAAS,EAAAwB,GAoDA,IAAAtC,EAlDA,OAmDA/B,EACA,mBAFA+B,EAnDAc,GAsDA,8DACAd,GAtDAc,EAAAwB,KAIAC,EAAA5C,IAQA,SAAAoB,EAAAD,EAAAV,EAAAoC,GACAvE,EACAK,MAAAc,QAAA0B,GACA,0DACA0B,EACA1B,GAEAY,EAAAtB,EAAAoC,MAGA,SAAAd,EAAAtB,EAAAoC,GACAvE,EACAK,MAAAc,QAAAgB,GACA,2GAEAoC,EACApC,GAaA,SAAAc,EAAAJ,GACA7C,EACAK,MAAAc,QAAA0B,GACA,2HAEAA,GAgCA,SAAAgB,EAAAnD,EAAA6D,GACA,IAAAC,EAAAjE,EAAAG,GACAV,EACA,QAAAwE,GAAA,QAAAA,EACA,2DACAD,EACAC,GA9EAC,EAAAC,QAAAJ,EACAG,EAAAC,QAAAC,QAAAL,EACAG,EAAAC,QAAAhD","file":"component---src-pages-examples-sortable-cancel-on-drop-outside-tsx-524178fa22e9b2681219.js","sourcesContent":["export default {\n\tCARD: 'card',\n}\n","import * as React from 'react'\nimport {\n\tDragSource,\n\tDropTarget,\n\tConnectDragSource,\n\tConnectDropTarget,\n\tDragSourceMonitor,\n\tDropTargetMonitor,\n} from 'react-dnd'\nimport ItemTypes from './ItemTypes'\n\nconst style = {\n\tborder: '1px dashed gray',\n\tpadding: '0.5rem 1rem',\n\tmarginBottom: '.5rem',\n\tbackgroundColor: 'white',\n\tcursor: 'move',\n}\n\nconst cardSource = {\n\tbeginDrag(props: CardProps) {\n\t\treturn {\n\t\t\tid: props.id,\n\t\t\toriginalIndex: props.findCard(props.id).index,\n\t\t}\n\t},\n\n\tendDrag(props: CardProps, monitor: DragSourceMonitor) {\n\t\tconst { id: droppedId, originalIndex } = monitor.getItem()\n\t\tconst didDrop = monitor.didDrop()\n\n\t\tif (!didDrop) {\n\t\t\tprops.moveCard(droppedId, originalIndex)\n\t\t}\n\t},\n}\n\nconst cardTarget = {\n\tcanDrop() {\n\t\treturn false\n\t},\n\n\thover(props: CardProps, monitor: DropTargetMonitor) {\n\t\tconst { id: draggedId } = monitor.getItem()\n\t\tconst { id: overId } = props\n\n\t\tif (draggedId !== overId) {\n\t\t\tconst { index: overIndex } = props.findCard(overId)\n\t\t\tprops.moveCard(draggedId, overIndex)\n\t\t}\n\t},\n}\n\nexport interface CardProps {\n\tid: string\n\ttext: string\n\tconnectDragSource?: ConnectDragSource\n\tconnectDropTarget?: ConnectDropTarget\n\tisDragging?: boolean\n\tmoveCard: (id: string, to: number) => void\n\tfindCard: (id: string) => { index: number }\n}\n\nclass Card extends React.Component<CardProps> {\n\tpublic render() {\n\t\tconst {\n\t\t\ttext,\n\t\t\tisDragging,\n\t\t\tconnectDragSource,\n\t\t\tconnectDropTarget,\n\t\t} = this.props\n\t\tconst opacity = isDragging ? 0 : 1\n\n\t\treturn (\n\t\t\tconnectDragSource &&\n\t\t\tconnectDropTarget &&\n\t\t\tconnectDragSource(\n\t\t\t\tconnectDropTarget(<div style={{ ...style, opacity }}>{text}</div>),\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DropTarget(ItemTypes.CARD, cardTarget, connect => ({\n\tconnectDropTarget: connect.dropTarget(),\n}))(\n\tDragSource(ItemTypes.CARD, cardSource, (connect, monitor) => ({\n\t\tconnectDragSource: connect.dragSource(),\n\t\tisDragging: monitor.isDragging(),\n\t}))(Card),\n)\n","import * as React from 'react'\nimport { DropTarget, ConnectDropTarget } from 'react-dnd'\nimport Card from './Card'\nimport ItemTypes from './ItemTypes'\nconst update = require('immutability-helper')\n\nconst style = {\n\twidth: 400,\n}\n\nconst cardTarget = {\n\tdrop() {\n\t\t//\n\t},\n}\n\nexport interface ContainerProps {\n\tconnectDropTarget?: ConnectDropTarget\n}\n\nexport interface ContainerState {\n\tcards: any[]\n}\n\nclass Container extends React.Component<ContainerProps, ContainerState> {\n\tconstructor(props: ContainerProps) {\n\t\tsuper(props)\n\t\tthis.moveCard = this.moveCard.bind(this)\n\t\tthis.findCard = this.findCard.bind(this)\n\t\tthis.state = {\n\t\t\tcards: [\n\t\t\t\t{\n\t\t\t\t\tid: 1,\n\t\t\t\t\ttext: 'Write a cool JS library',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 2,\n\t\t\t\t\ttext: 'Make it generic enough',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 3,\n\t\t\t\t\ttext: 'Write README',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 4,\n\t\t\t\t\ttext: 'Create some examples',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 5,\n\t\t\t\t\ttext: 'Spam in Twitter and IRC to promote it',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 6,\n\t\t\t\t\ttext: '???',\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 7,\n\t\t\t\t\ttext: 'PROFIT',\n\t\t\t\t},\n\t\t\t],\n\t\t}\n\t}\n\n\tpublic render() {\n\t\tconst { connectDropTarget } = this.props\n\t\tconst { cards } = this.state\n\n\t\treturn (\n\t\t\tconnectDropTarget &&\n\t\t\tconnectDropTarget(\n\t\t\t\t<div style={style}>\n\t\t\t\t\t{cards.map(card => (\n\t\t\t\t\t\t<Card\n\t\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\t\ttext={card.text}\n\t\t\t\t\t\t\tmoveCard={this.moveCard}\n\t\t\t\t\t\t\tfindCard={this.findCard}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>,\n\t\t\t)\n\t\t)\n\t}\n\n\tprivate moveCard(id: string, atIndex: number) {\n\t\tconst { card, index } = this.findCard(id)\n\t\tthis.setState(\n\t\t\tupdate(this.state, {\n\t\t\t\tcards: {\n\t\t\t\t\t$splice: [[index, 1], [atIndex, 0, card]],\n\t\t\t\t},\n\t\t\t}),\n\t\t)\n\t}\n\n\tprivate findCard(id: string) {\n\t\tconst { cards } = this.state\n\t\tconst card = cards.filter(c => c.id === id)[0]\n\n\t\treturn {\n\t\t\tcard,\n\t\t\tindex: cards.indexOf(card),\n\t\t}\n\t}\n}\n\nexport default DropTarget(ItemTypes.CARD, cardTarget, connect => ({\n\tconnectDropTarget: connect.dropTarget(),\n}))(Container)\n","import * as React from 'react'\nimport Container from './Container'\n\nexport default class SortableCancelOnDropOutside extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>\n\t\t\t\t\t\t<a href=\"https://github.com/react-dnd/react-dnd/tree/master/packages/documentation/src/examples/04%20Sortable/Cancel%20on%20Drop%20Outside\">\n\t\t\t\t\t\t\tBrowse the Source\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tBecause you write the logic instead of using the readymade components,\n\t\t\t\t\tyou can tweak the behavior to the one your app needs. In this example,\n\t\t\t\t\tinstead of moving the card inside the drop target&apos;s{' '}\n\t\t\t\t\t<code>drop()</code> handler, we do it inside the drag source&apos;s{' '}\n\t\t\t\t\t<code>endDrag()</code> handler. This let us check{' '}\n\t\t\t\t\t<code>monitor.didDrop()</code> and revert the drag operation if the\n\t\t\t\t\tcard was dropped outside its container.\n\t\t\t\t</p>\n\t\t\t\t<Container />\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Example from '../../../examples/04 Sortable/Cancel on Drop Outside'\nimport Layout from '../../../components/layout'\n\nexport default (props: any) => (\n\t<Layout {...props}>\n\t\t<Example />\n\t</Layout>\n)\n","var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\n\nvar toString = Object.prototype.toString\nvar type = function(obj) {\n  return toString.call(obj).slice(8, -1);\n}\n\nvar assign = Object.assign || /* istanbul ignore next */ function assign(target, source) {\n  getAllKeys(source).forEach(function(key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ?\n  function(obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)) } :\n  /* istanbul ignore next */ function(obj) { return Object.keys(obj) };\n\n/* istanbul ignore next */\nfunction copy(object) {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object)\n  } else if (type(object) === 'Map') {\n    return new Map(object)\n  } else if (type(object) === 'Set') {\n    return new Set(object)\n  } else if (object && typeof object === 'object') {\n    var prototype = Object.getPrototypeOf(object);\n    return assign(Object.create(prototype), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n  update.extend = function(directive, fn) {\n    commands[directive] = fn;\n  };\n  update.isEquals = function(a, b) { return a === b; };\n\n  return update;\n\n  function update(object, spec) {\n    if (typeof spec === 'function') {\n      spec = { $apply: spec };\n    }\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(\n        !Array.isArray(spec),\n        'update(): You provided an invalid spec to update(). The spec may ' +\n        'not contain an array except as the value of $set, $push, $unshift, ' +\n        '$splice or any custom command allowing an array value.'\n      );\n    }\n\n    invariant(\n      typeof spec === 'object' && spec !== null,\n      'update(): You provided an invalid spec to update(). The spec and ' +\n      'every included key path must be plain objects containing one of the ' +\n      'following commands: %s.',\n      Object.keys(commands).join(', ')\n    );\n\n    var nextObject = object;\n    var index, key;\n    getAllKeys(spec).forEach(function(key) {\n      if (hasOwnProperty.call(commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n        if (objectWasNextObject && update.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey =\n          type(object) === 'Map'\n            ? update(object.get(key), spec[key])\n            : update(object[key], spec[key]);\n        var nextObjectValue =\n          type(nextObject) === 'Map'\n              ? nextObject.get(key)\n              : nextObject[key];\n        if (!update.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    })\n    return nextObject;\n  }\n\n}\n\nvar defaultCommands = {\n  $push: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function(value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function(args) {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function(value, nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function(targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n\n    targets.forEach(function(target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n\n    return nextObjectCopy;\n  },\n  $unset: function(value, nextObject, spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function(key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n    if (type(nextObject) === 'Map') {\n      value.forEach(function(pair) {\n        var key = pair[0];\n        var value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach(function(value) {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n    return nextObject;\n  },\n  $remove: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function(key) {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function(value, nextObject, spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function(key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function(value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\n\nvar contextForExport = newContext();\n\nmodule.exports = contextForExport;\nmodule.exports.default = contextForExport;\nmodule.exports.newContext = newContext;\n\n// invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  invariantSpecArray(spec[command], command)\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(\n    Array.isArray(spec),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    spec\n  );\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(\n    Array.isArray(value),\n    'Expected $splice target to be an array; got %s',\n    value\n  );\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected spec of $splice to be an array of arrays; got %s. ' +\n    'Did you forget to wrap your parameters in an array?',\n    value\n  );\n}\n\nfunction invariantApply(fn) {\n  invariant(\n    typeof fn === 'function',\n    'update(): expected spec of $apply to be a function; got %s.',\n    fn\n  );\n}\n\nfunction invariantSet(spec) {\n  invariant(\n    Object.keys(spec).length === 1,\n    'Cannot have more than one key in an object with $set'\n  );\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(\n    specValue && typeof specValue === 'object',\n    'update(): $merge expects a spec of type \\'object\\'; got %s',\n    specValue\n  );\n  invariant(\n    target && typeof target === 'object',\n    'update(): $merge expects a target of type \\'object\\'; got %s',\n    target\n  );\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(\n    typeOfTarget === 'Map' || typeOfTarget === 'Set',\n    'update(): %s expects a target of type Set or Map; got %s',\n    command,\n    typeOfTarget\n  );\n}\n"],"sourceRoot":""}