{"version":3,"sources":["webpack:///./src/examples/01 Dustbin/Copy or Move/Dustbin.tsx","webpack:///./src/examples/01 Dustbin/Copy or Move/Box.tsx","webpack:///./src/examples/01 Dustbin/Copy or Move/Container.tsx","webpack:///./src/examples/01 Dustbin/Copy or Move/index.tsx","webpack:///./src/pages/examples/dustbin/copy-or-move.tsx","webpack:///./src/examples/01 Dustbin/Single Target/ItemTypes.ts"],"names":["style","height","width","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","render","_this$props","this","props","canDrop","isOver","allowedDropEffect","connectDropTarget","isActive","backgroundColor","react","Object","assign","React","DropTarget","ItemTypes","BOX","drop","_ref","name","connect","monitor","dropTarget","border","boxSource","beginDrag","endDrag","item","getItem","dropResult","getDropResult","alertMessage","dropEffect","alert","Box","isDragging","connectDragSource","opacity","DragSource","dragSource","Container","overflow","clear","Copy_or_Move_Dustbin","Copy_or_Move_Box","DustbinCopyOrMove","href","Container_Container","__webpack_exports__","layout","Copy_or_Move_DustbinCopyOrMove"],"mappings":"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","file":"component---src-pages-examples-dustbin-copy-or-move-tsx-653696ba4be518669e1e.js","sourcesContent":["import * as React from 'react'\nimport { DropTarget, ConnectDropTarget } from 'react-dnd'\nimport ItemTypes from '../Single Target/ItemTypes'\n\nconst style: React.CSSProperties = {\n\theight: '12rem',\n\twidth: '12rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcolor: 'white',\n\tpadding: '1rem',\n\ttextAlign: 'center',\n\tfontSize: '1rem',\n\tlineHeight: 'normal',\n\tfloat: 'left',\n}\n\nconst boxTarget = {\n\tdrop({ allowedDropEffect }: DustbinProps) {\n\t\treturn {\n\t\t\tname: `${allowedDropEffect} Dustbin`,\n\t\t\tallowedDropEffect,\n\t\t}\n\t},\n}\n\nexport interface DustbinProps {\n\tconnectDropTarget?: ConnectDropTarget\n\tcanDrop?: boolean\n\tisOver?: boolean\n\tallowedDropEffect: string\n}\n\nclass Dustbin extends React.Component<DustbinProps> {\n\tpublic render() {\n\t\tconst { canDrop, isOver, allowedDropEffect, connectDropTarget } = this.props\n\t\tconst isActive = canDrop && isOver\n\n\t\tlet backgroundColor = '#222'\n\t\tif (isActive) {\n\t\t\tbackgroundColor = 'darkgreen'\n\t\t} else if (canDrop) {\n\t\t\tbackgroundColor = 'darkkhaki'\n\t\t}\n\n\t\treturn (\n\t\t\tconnectDropTarget &&\n\t\t\tconnectDropTarget(\n\t\t\t\t<div style={{ ...style, backgroundColor }}>\n\t\t\t\t\t{`Works with ${allowedDropEffect} drop effect`}\n\t\t\t\t\t<br />\n\t\t\t\t\t<br />\n\t\t\t\t\t{isActive ? 'Release to drop' : 'Drag a box here'}\n\t\t\t\t</div>,\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DropTarget(ItemTypes.BOX, boxTarget, (connect, monitor) => ({\n\tconnectDropTarget: connect.dropTarget(),\n\tisOver: monitor.isOver(),\n\tcanDrop: monitor.canDrop(),\n}))(Dustbin)\n","import * as React from 'react'\nimport {\n\tDragSource,\n\tConnectDragSource,\n\tDragSourceConnector,\n\tDragSourceMonitor,\n} from 'react-dnd'\nimport ItemTypes from '../Single Target/ItemTypes'\n\nconst style: React.CSSProperties = {\n\tborder: '1px dashed gray',\n\tbackgroundColor: 'white',\n\tpadding: '0.5rem 1rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tfloat: 'left',\n}\n\nconst boxSource = {\n\tbeginDrag(props: BoxProps) {\n\t\treturn {\n\t\t\tname: props.name,\n\t\t}\n\t},\n\n\tendDrag(props: BoxProps, monitor: DragSourceMonitor) {\n\t\tconst item = monitor.getItem()\n\t\tconst dropResult = monitor.getDropResult()\n\n\t\tif (dropResult) {\n\t\t\tlet alertMessage = ''\n\t\t\tconst isDropAllowed =\n\t\t\t\tdropResult.allowedDropEffect === 'any' ||\n\t\t\t\tdropResult.allowedDropEffect === dropResult.dropEffect\n\n\t\t\tif (isDropAllowed) {\n\t\t\t\tconst isCopyAction = dropResult.dropEffect === 'copy'\n\t\t\t\tconst actionName = isCopyAction ? 'copied' : 'moved'\n\t\t\t\talertMessage = `You ${actionName} ${item.name} into ${dropResult.name}!`\n\t\t\t} else {\n\t\t\t\talertMessage = `You cannot ${dropResult.dropEffect} an item into the ${\n\t\t\t\t\tdropResult.name\n\t\t\t\t}`\n\t\t\t}\n\t\t\talert(alertMessage)\n\t\t}\n\t},\n}\n\nexport interface BoxProps {\n\tname: string\n\tisDragging?: boolean\n\tconnectDragSource?: ConnectDragSource\n}\n\nclass Box extends React.Component<BoxProps> {\n\tpublic render() {\n\t\tconst { isDragging, connectDragSource } = this.props\n\t\tconst { name } = this.props\n\t\tconst opacity = isDragging ? 0.4 : 1\n\n\t\treturn (\n\t\t\tconnectDragSource &&\n\t\t\tconnectDragSource(<div style={{ ...style, opacity }}>{name}</div>)\n\t\t)\n\t}\n}\n\nexport default DragSource(\n\tItemTypes.BOX,\n\tboxSource,\n\t(connect: DragSourceConnector, monitor: DragSourceMonitor) => ({\n\t\tconnectDragSource: connect.dragSource(),\n\t\tisDragging: monitor.isDragging(),\n\t}),\n)(Box)\n","import * as React from 'react'\nimport Dustbin from './Dustbin'\nimport Box from './Box'\n\nexport default class Container extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t<Dustbin allowedDropEffect=\"any\" />\n\t\t\t\t\t<Dustbin allowedDropEffect=\"copy\" />\n\t\t\t\t\t<Dustbin allowedDropEffect=\"move\" />\n\t\t\t\t</div>\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t<Box name=\"Glass\" />\n\t\t\t\t\t<Box name=\"Banana\" />\n\t\t\t\t\t<Box name=\"Paper\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Container from './Container'\n\nexport default class DustbinCopyOrMove extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>\n\t\t\t\t\t\t<a href=\"https://github.com/react-dnd/react-dnd/tree/master/packages/documentation/src/examples/01%20Dustbin/Copy%20or%20Move\">\n\t\t\t\t\t\t\tBrowse the Source\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis example demonstrates drop targets that can accept copy and move\n\t\t\t\t\tdrop effects, which users can switch between by holding down or\n\t\t\t\t\treleasing the alt key as they drag.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tIn a todo list app, for example, the default drag and drop operation\n\t\t\t\t\tcould be used to sort the list, while holding down the alt key while\n\t\t\t\t\tdragging and dropping could copy the todo item to the drop target\n\t\t\t\t\tinstead of moving it.\n\t\t\t\t</p>\n\t\t\t\t<Container />\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Example from '../../../examples/01 Dustbin/Copy or Move'\nimport Layout from '../../../components/layout'\n\nexport default (props: any) => (\n\t<Layout {...props}>\n\t\t<Example />\n\t</Layout>\n)\n","export default {\n\tBOX: 'box',\n}\n"],"sourceRoot":""}