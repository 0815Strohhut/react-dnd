{"version":3,"sources":["webpack:///./src/examples/04 Sortable/Stress Test/ItemTypes.ts","webpack:///./src/examples/04 Sortable/Stress Test/Card.tsx","webpack:///./src/examples/04 Sortable/Stress Test/Container.tsx","webpack:///./src/examples/04 Sortable/Stress Test/index.tsx","webpack:///./src/pages/examples/sortable/stress-test.tsx"],"names":["ItemTypes","style","border","padding","marginBottom","backgroundColor","cursor","Card","render","_this$props","this","props","text","isDragging","connectDragSource","connectDropTarget","opacity","react","Object","assign","React","DropTarget","hover","monitor","draggedId","getItem","id","moveCard","connect","dropTarget","DragSource","beginDrag","dragSource","update","require","width","Container","_this","_React$Component","call","bind","assertThisInitialized_default","drawFrame","cardsById","cardsByIndex","i","card","name","findName","state","componentWillUnmount","undefined","requestedFrame","cancelAnimationFrame","_this2","map","Stress_Test_Card","key","scheduleUpdate","updateFn","pendingUpdateFn","requestAnimationFrame","nextState","setState","afterId","_this$state","afterCard","cardIndex","indexOf","afterIndex","$splice","SortableStressTest","shouldRender","componentDidMount","href","Container_Container","__webpack_exports__","layout","Stress_Test_SortableStressTest"],"mappings":"6LAAeA,EACR,OCSDC,EAA6B,CAClCC,OAAQ,kBACRC,QAAS,cACTC,aAAc,QACdC,gBAAiB,QACjBC,OAAQ,QA4BHC,4FACEC,kBAAS,IAAAC,EAMXC,KAAKC,MAJRC,EAFcH,EAEdG,KACAC,EAHcJ,EAGdI,WACAC,EAJcL,EAIdK,kBACAC,EALcN,EAKdM,kBAEKC,EAAUH,EAAa,EAAI,EAEjC,OACCC,GACAC,GACAD,EACCC,EAAkBE,EAAA,qBAAKhB,MAAKiB,OAAAC,OAAA,GAAOlB,EAAP,CAAce,aAAYJ,SAdvCQ,aAoBJC,uBAAWrB,EAvCP,CAClBsB,MADkB,SACZX,EAAkBY,GACvB,IAAMC,EAAYD,EAAQE,UAAUC,GAEhCF,IAAcb,EAAMe,IACvBf,EAAMgB,SAASH,EAAWb,EAAMe,MAkCmB,SAAAE,GAAO,MAAK,CACjEb,kBAAmBa,EAAQC,eADbR,CAGdS,qBAAW9B,EAhDO,CAClB+B,UADkB,SACRpB,GACT,MAAO,CAAEe,GAAIf,EAAMe,MA8CmB,SAACE,EAASL,GAAV,MAAuB,CAC7DT,kBAAmBc,EAAQI,aAC3BnB,WAAYU,EAAQV,eAFrBiB,CAGIvB,IClEC0B,EAASC,EAAQ,KAEjBjC,EAAQ,CACbkC,MAAO,KAQaC,cAKpB,SAAAA,EAAYzB,GAAW,IAAA0B,GACtBA,EAAAC,EAAAC,KAAA7B,KAAMC,IAAND,MAEKiB,SAAWU,EAAKV,SAASa,KAAdC,QAAAJ,KAChBA,EAAKK,UAAYL,EAAKK,UAAUF,KAAfC,QAAAJ,KAKjB,IAHA,IAAMM,EAAoC,GACpCC,EAAe,GAEZC,EAAI,EAAGA,EAAI,IAAMA,GAAK,EAAG,CACjC,IAAMC,EAAO,CAAEpB,GAAImB,EAAGjC,KAAMmC,OAAKC,YACjCL,EAAUG,EAAKpB,IAAMoB,EACrBF,EAAaC,GAAKC,EAZG,OAetBT,EAAKY,MAAQ,CACZN,YACAC,gBAjBqBP,sCAqBhBa,qCACsBC,IAAxBzC,KAAK0C,gBACRC,qBAAqB3C,KAAK0C,mBAIrB5C,kBAAS,IAAA8C,EAAA5C,KACPkC,EAAiBlC,KAAKuC,MAAtBL,aAER,OACC3B,EAAA,qBAAKhB,MAAOA,GACV2C,EAAaW,IAAI,SAAAT,GAAI,OACrB7B,EAAA,cAACuC,EAAD,CACCC,IAAKX,EAAKpB,GACVA,GAAIoB,EAAKpB,GACTd,KAAMkC,EAAKlC,KACXe,SAAU2B,EAAK3B,iBAQZ+B,wBAAeC,GACtBjD,KAAKkD,gBAAkBD,EAElBjD,KAAK0C,iBACT1C,KAAK0C,eAAiBS,sBAAsBnD,KAAKgC,eAI3CA,qBACP,IAAMoB,EAAY7B,EAAOvB,KAAKuC,MAAOvC,KAAKkD,iBAC1ClD,KAAKqD,SAASD,GAEdpD,KAAKkD,qBAAkBT,EACvBzC,KAAK0C,oBAAiBD,KAGfxB,kBAASD,EAAYsC,GAAiB,IAAAC,EACTvD,KAAKuC,MAAjCN,EADqCsB,EACrCtB,UAAWC,EAD0BqB,EAC1BrB,aAEbE,EAAOH,EAAUjB,GACjBwC,EAAYvB,EAAUqB,GAEtBG,EAAYvB,EAAawB,QAAQtB,GACjCuB,EAAazB,EAAawB,QAAQF,GAExCxD,KAAKgD,eAAe,CACnBd,aAAc,CACb0B,QAAS,CAAC,CAACH,EAAW,GAAI,CAACE,EAAY,EAAGvB,WA7EP1B,aCPlBmD,cAIpB,SAAAA,EAAY5D,GAAW,IAAA0B,EAAA,OACtBA,EAAAC,EAAAC,KAAA7B,KAAMC,IAAND,MAEKuC,MAAQ,CAAEuB,cAAc,GAHPnC,sCAMhBoC,6BAEN/D,KAAKqD,SAAS,CAAES,cAAc,OAGxBhE,kBAAS,IACPgE,EAAiB9D,KAAKuC,MAAtBuB,aAER,OACCvD,EAAA,yBACCA,EAAA,uBACCA,EAAA,uBACCA,EAAA,mBAAGyD,KAAK,sHAAR,uBAKFzD,EAAA,kLAGgBA,EAAA,mDAHhB,wHAKqC,IACpCA,EAAA,mBAAGyD,KAAK,gDAAR,oBAND,4IAaAzD,EAAA,0IAEmD,IAClDA,EAAA,+DAHD,QAGqD,IACpDA,EAAA,uDAJD,eAImDA,EAAA,mCAAmB,IAJtE,uFAQCuD,GAAgBvD,EAAA,cAAC0D,EAAD,WAhD2BvD,sBCHjCwD,EAAA,iBAACjE,GAAD,OACdM,EAAA,cAAC4D,EAAA,EAAWlE,EACXM,EAAA,cAAC6D,EAAD","file":"component---src-pages-examples-sortable-stress-test-tsx-cbd22d923cec7d49ccc8.js","sourcesContent":["export default {\n\tCARD: 'card',\n}\n","import * as React from 'react'\nimport {\n\tDragSource,\n\tDropTarget,\n\tConnectDragSource,\n\tConnectDropTarget,\n\tDropTargetMonitor,\n} from 'react-dnd'\nimport ItemTypes from './ItemTypes'\n\nconst style: React.CSSProperties = {\n\tborder: '1px dashed gray',\n\tpadding: '0.5rem 1rem',\n\tmarginBottom: '.5rem',\n\tbackgroundColor: 'white',\n\tcursor: 'move',\n}\n\nconst cardSource = {\n\tbeginDrag(props: CardProps) {\n\t\treturn { id: props.id }\n\t},\n}\n\nconst cardTarget = {\n\thover(props: CardProps, monitor: DropTargetMonitor) {\n\t\tconst draggedId = monitor.getItem().id\n\n\t\tif (draggedId !== props.id) {\n\t\t\tprops.moveCard(draggedId, props.id)\n\t\t}\n\t},\n}\n\nexport interface CardProps {\n\tid: any\n\ttext: string\n\tisDragging?: boolean\n\tconnectDragSource?: ConnectDragSource\n\tconnectDropTarget?: ConnectDropTarget\n\tmoveCard: (draggedId: string, id: string) => void\n}\n\nclass Card extends React.Component<CardProps> {\n\tpublic render() {\n\t\tconst {\n\t\t\ttext,\n\t\t\tisDragging,\n\t\t\tconnectDragSource,\n\t\t\tconnectDropTarget,\n\t\t} = this.props\n\t\tconst opacity = isDragging ? 0 : 1\n\n\t\treturn (\n\t\t\tconnectDragSource &&\n\t\t\tconnectDropTarget &&\n\t\t\tconnectDragSource(\n\t\t\t\tconnectDropTarget(<div style={{ ...style, opacity }}>{text}</div>),\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DropTarget(ItemTypes.CARD, cardTarget, connect => ({\n\tconnectDropTarget: connect.dropTarget(),\n}))(\n\tDragSource(ItemTypes.CARD, cardSource, (connect, monitor) => ({\n\t\tconnectDragSource: connect.dragSource(),\n\t\tisDragging: monitor.isDragging(),\n\t}))(Card),\n)\n","import * as React from 'react'\nimport { name } from 'faker'\nimport Card from './Card'\nconst update = require('immutability-helper')\n\nconst style = {\n\twidth: 400,\n}\n\nexport interface ContainerState {\n\tcardsById: { [key: string]: any }\n\tcardsByIndex: any[]\n}\n\nexport default class Container extends React.Component<{}, ContainerState> {\n\t// tslint:disable-next-line ban-types\n\tprivate pendingUpdateFn: any\n\tprivate requestedFrame: number | undefined\n\n\tconstructor(props: {}) {\n\t\tsuper(props)\n\n\t\tthis.moveCard = this.moveCard.bind(this)\n\t\tthis.drawFrame = this.drawFrame.bind(this)\n\n\t\tconst cardsById: { [key: string]: any } = {}\n\t\tconst cardsByIndex = []\n\n\t\tfor (let i = 0; i < 1000; i += 1) {\n\t\t\tconst card = { id: i, text: name.findName() }\n\t\t\tcardsById[card.id] = card\n\t\t\tcardsByIndex[i] = card\n\t\t}\n\n\t\tthis.state = {\n\t\t\tcardsById,\n\t\t\tcardsByIndex,\n\t\t}\n\t}\n\n\tpublic componentWillUnmount() {\n\t\tif (this.requestedFrame !== undefined) {\n\t\t\tcancelAnimationFrame(this.requestedFrame)\n\t\t}\n\t}\n\n\tpublic render() {\n\t\tconst { cardsByIndex } = this.state\n\n\t\treturn (\n\t\t\t<div style={style}>\n\t\t\t\t{cardsByIndex.map(card => (\n\t\t\t\t\t<Card\n\t\t\t\t\t\tkey={card.id}\n\t\t\t\t\t\tid={card.id}\n\t\t\t\t\t\ttext={card.text}\n\t\t\t\t\t\tmoveCard={this.moveCard}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t)\n\t}\n\n\t// tslint:disable-next-line ban-types\n\tprivate scheduleUpdate(updateFn: any) {\n\t\tthis.pendingUpdateFn = updateFn\n\n\t\tif (!this.requestedFrame) {\n\t\t\tthis.requestedFrame = requestAnimationFrame(this.drawFrame)\n\t\t}\n\t}\n\n\tprivate drawFrame() {\n\t\tconst nextState = update(this.state, this.pendingUpdateFn)\n\t\tthis.setState(nextState)\n\n\t\tthis.pendingUpdateFn = undefined\n\t\tthis.requestedFrame = undefined\n\t}\n\n\tprivate moveCard(id: string, afterId: string) {\n\t\tconst { cardsById, cardsByIndex } = this.state\n\n\t\tconst card = cardsById[id]\n\t\tconst afterCard = cardsById[afterId]\n\n\t\tconst cardIndex = cardsByIndex.indexOf(card)\n\t\tconst afterIndex = cardsByIndex.indexOf(afterCard)\n\n\t\tthis.scheduleUpdate({\n\t\t\tcardsByIndex: {\n\t\t\t\t$splice: [[cardIndex, 1], [afterIndex, 0, card]],\n\t\t\t},\n\t\t})\n\t}\n}\n","import * as React from 'react'\nimport Container from './Container'\n\nexport interface SortableStressTestState {\n\tshouldRender: boolean\n}\n\nexport default class SortableStressTest extends React.Component<\n\t{},\n\tSortableStressTestState\n> {\n\tconstructor(props: {}) {\n\t\tsuper(props)\n\t\t// Avoid rendering on server because the big data list is generated\n\t\tthis.state = { shouldRender: false }\n\t}\n\n\tpublic componentDidMount() {\n\t\t// Won't fire on server.\n\t\tthis.setState({ shouldRender: true })\n\t}\n\n\tpublic render() {\n\t\tconst { shouldRender } = this.state\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>\n\t\t\t\t\t\t<a href=\"https://github.com/react-dnd/react-dnd/tree/master/packages/documentation/src/examples/04%20Sortable/Stress%20Test\">\n\t\t\t\t\t\t\tBrowse the Source\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tHow many items can React DnD handle at the same time? There are a\n\t\t\t\t\tthousand items in this list. With some optimizations like updating the\n\t\t\t\t\tstate inside a <code>requestAnimationFrame</code> callback, it can\n\t\t\t\t\thandle a few thousand items without lagging. After that, you&apos;re\n\t\t\t\t\tbetter off using virtual lists like{' '}\n\t\t\t\t\t<a href=\"https://github.com/facebook/fixed-data-table\">\n\t\t\t\t\t\tfixed-data-table\n\t\t\t\t\t</a>\n\t\t\t\t\t. Luckily, React DnD is designed to work great with any virtual React\n\t\t\t\t\tdata list components because it doesn&apos;t keep any state in the\n\t\t\t\t\tDOM.\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis example does not scroll automatically but you can add the\n\t\t\t\t\tscrolling with a parent drop target that compares{' '}\n\t\t\t\t\t<code>component.getBoundingClientRect()</code> with{' '}\n\t\t\t\t\t<code>monitor.getClientOffset()</code> inside its <code>hover</code>{' '}\n\t\t\t\t\thandler. In fact, you are welcome to contribute this functionality to\n\t\t\t\t\tthis example!\n\t\t\t\t</p>\n\t\t\t\t{shouldRender && <Container />}\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Example from '../../../examples/04 Sortable/Stress Test'\nimport Layout from '../../../components/layout'\n\nexport default (props: any) => (\n\t<Layout {...props}>\n\t\t<Example />\n\t</Layout>\n)\n"],"sourceRoot":""}