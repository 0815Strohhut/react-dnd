{"version":3,"sources":["webpack:///./src/examples/01 Dustbin/Multiple Targets/Dustbin.tsx","webpack:///./src/examples/01 Dustbin/Multiple Targets/Box.tsx","webpack:///./src/examples/01 Dustbin/Multiple Targets/ItemTypes.ts","webpack:///./src/examples/01 Dustbin/Multiple Targets/Container.tsx","webpack:///./src/examples/01 Dustbin/Multiple Targets/index.tsx","webpack:///./src/pages/examples/dustbin/multiple-targets.tsx","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/immutability-helper/index.js"],"names":["style","height","width","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","render","_this$props","this","props","accepts","isOver","canDrop","connectDropTarget","lastDroppedItem","isActive","backgroundColor","react","Object","assign","join","JSON","stringify","React","DropTarget","drop","monitor","onDrop","getItem","connect","dropTarget","border","cursor","Box","name","isDropped","isDragging","connectDragSource","opacity","DragSource","type","beginDrag","dragSource","ItemTypes","FOOD","GLASS","PAPER","update","require","Container","_this","_React$Component","call","state","dustbins","NativeTypes","URL","FILE","boxes","droppedBoxNames","boxName","indexOf","_this2","_this$state","overflow","clear","map","_ref","index","Multiple_Targets_Dustbin","item","handleDrop","key","_ref2","Multiple_Targets_Box","_dustbins","$push","setState","$set","DustbinMultipleTargets","href","Container_Container","__webpack_exports__","layout","Multiple_Targets_DustbinMultipleTargets","invariant","__webpack_require__","hasOwnProperty","prototype","splice","Array","toString","obj","slice","target","source","getAllKeys","forEach","getOwnPropertySymbols","keys","concat","copy","object","isArray","constructor","length","Map","Set","getPrototypeOf","create","newContext","commands","defaultCommands","extend","directive","fn","isEquals","a","b","spec","$apply","nextObject","objectWasNextObject","nextValueForKey","get","nextObjectValue","set","value","invariantPushAndUnshift","$unshift","$splice","originalObject","invariantSplice","invariantSplices","args","apply","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","$add","invariantMapOrSet","pair","has","add","$remove","delete","$merge","specValue","original","contextForExport","command","typeOfTarget","module","exports","default"],"mappings":"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","file":"component---src-pages-examples-dustbin-multiple-targets-tsx-f4199c81f3290fa4107f.js","sourcesContent":["import * as React from 'react'\nimport { DropTarget, ConnectDropTarget, DropTargetMonitor } from 'react-dnd'\n\nconst style: React.CSSProperties = {\n\theight: '12rem',\n\twidth: '12rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcolor: 'white',\n\tpadding: '1rem',\n\ttextAlign: 'center',\n\tfontSize: '1rem',\n\tlineHeight: 'normal',\n\tfloat: 'left',\n}\n\nconst dustbinTarget = {\n\tdrop(props: DustbinProps, monitor: DropTargetMonitor) {\n\t\tprops.onDrop(monitor.getItem())\n\t},\n}\n\nexport interface DustbinProps {\n\taccepts: string[]\n\tcanDrop?: boolean\n\tlastDroppedItem?: any\n\tisOver?: boolean\n\tconnectDropTarget?: ConnectDropTarget\n\tonDrop: (item: any) => void\n}\n\nclass Dustbin extends React.Component<DustbinProps> {\n\tpublic render() {\n\t\tconst {\n\t\t\taccepts,\n\t\t\tisOver,\n\t\t\tcanDrop,\n\t\t\tconnectDropTarget,\n\t\t\tlastDroppedItem,\n\t\t} = this.props\n\t\tconst isActive = isOver && canDrop\n\n\t\tlet backgroundColor = '#222'\n\t\tif (isActive) {\n\t\t\tbackgroundColor = 'darkgreen'\n\t\t} else if (canDrop) {\n\t\t\tbackgroundColor = 'darkkhaki'\n\t\t}\n\n\t\treturn (\n\t\t\tconnectDropTarget &&\n\t\t\tconnectDropTarget(\n\t\t\t\t<div style={{ ...style, backgroundColor }}>\n\t\t\t\t\t{isActive\n\t\t\t\t\t\t? 'Release to drop'\n\t\t\t\t\t\t: `This dustbin accepts: ${accepts.join(', ')}`}\n\n\t\t\t\t\t{lastDroppedItem && (\n\t\t\t\t\t\t<p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>,\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DropTarget(\n\t(props: DustbinProps) => props.accepts,\n\tdustbinTarget,\n\t(connect, monitor) => ({\n\t\tconnectDropTarget: connect.dropTarget(),\n\t\tisOver: monitor.isOver(),\n\t\tcanDrop: monitor.canDrop(),\n\t}),\n)(Dustbin)\n","import * as React from 'react'\nimport {\n\tDragSource,\n\tConnectDragSource,\n\tDragSourceConnector,\n\tDragSourceMonitor,\n} from 'react-dnd'\n\nconst style: React.CSSProperties = {\n\tborder: '1px dashed gray',\n\tbackgroundColor: 'white',\n\tpadding: '0.5rem 1rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcursor: 'move',\n\tfloat: 'left',\n}\n\nconst boxSource = {\n\tbeginDrag(props: BoxProps) {\n\t\treturn {\n\t\t\tname: props.name,\n\t\t}\n\t},\n}\n\nexport interface BoxProps {\n\tname: string\n\ttype: string\n\tconnectDragSource?: ConnectDragSource\n\tisDragging?: boolean\n\tisDropped?: boolean\n}\n\nclass Box extends React.Component<BoxProps> {\n\tpublic render() {\n\t\tconst { name, isDropped, isDragging, connectDragSource } = this.props\n\t\tconst opacity = isDragging ? 0.4 : 1\n\n\t\treturn (\n\t\t\tconnectDragSource &&\n\t\t\tconnectDragSource(\n\t\t\t\t<div style={{ ...style, opacity }}>\n\t\t\t\t\t{isDropped ? <s>{name}</s> : name}\n\t\t\t\t</div>,\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DragSource(\n\t(props: BoxProps) => props.type,\n\tboxSource,\n\t(connect: DragSourceConnector, monitor: DragSourceMonitor) => ({\n\t\tconnectDragSource: connect.dragSource(),\n\t\tisDragging: monitor.isDragging(),\n\t}),\n)(Box)\n","export default {\n\tFOOD: 'food',\n\tGLASS: 'glass',\n\tPAPER: 'paper',\n}\n","import * as React from 'react'\nimport { NativeTypes } from 'react-dnd-html5-backend'\nimport Dustbin from './Dustbin'\nimport Box from './Box'\nimport ItemTypes from './ItemTypes'\nconst update = require('immutability-helper')\n\nexport interface ContainerState {\n\tdroppedBoxNames: string[]\n\tdustbins: Array<{\n\t\taccepts: string[]\n\t\tlastDroppedItem: any\n\t}>\n\tboxes: Array<{\n\t\tname: string\n\t\ttype: string\n\t}>\n}\nexport default class Container extends React.Component<{}, ContainerState> {\n\tconstructor(props: {}) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdustbins: [\n\t\t\t\t{ accepts: [ItemTypes.GLASS], lastDroppedItem: null },\n\t\t\t\t{ accepts: [ItemTypes.FOOD], lastDroppedItem: null },\n\t\t\t\t{\n\t\t\t\t\taccepts: [ItemTypes.PAPER, ItemTypes.GLASS, NativeTypes.URL],\n\t\t\t\t\tlastDroppedItem: null,\n\t\t\t\t},\n\t\t\t\t{ accepts: [ItemTypes.PAPER, NativeTypes.FILE], lastDroppedItem: null },\n\t\t\t],\n\t\t\tboxes: [\n\t\t\t\t{ name: 'Bottle', type: ItemTypes.GLASS },\n\t\t\t\t{ name: 'Banana', type: ItemTypes.FOOD },\n\t\t\t\t{ name: 'Magazine', type: ItemTypes.PAPER },\n\t\t\t],\n\t\t\tdroppedBoxNames: [],\n\t\t}\n\t}\n\n\tpublic isDropped(boxName: string) {\n\t\treturn this.state.droppedBoxNames.indexOf(boxName) > -1\n\t}\n\n\tpublic render() {\n\t\tconst { boxes, dustbins } = this.state\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t{dustbins.map(({ accepts, lastDroppedItem }, index) => (\n\t\t\t\t\t\t<Dustbin\n\t\t\t\t\t\t\taccepts={accepts}\n\t\t\t\t\t\t\tlastDroppedItem={lastDroppedItem}\n\t\t\t\t\t\t\t// tslint:disable-next-line jsx-no-lambda\n\t\t\t\t\t\t\tonDrop={item => this.handleDrop(index, item)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t{boxes.map(({ name, type }, index) => (\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\tisDropped={this.isDropped(name)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tprivate handleDrop(index: number, item: { name: string }) {\n\t\tconst { name } = item\n\t\tconst droppedBoxNames = name ? { $push: [name] } : {}\n\n\t\tthis.setState(\n\t\t\tupdate(this.state, {\n\t\t\t\tdustbins: {\n\t\t\t\t\t[index]: {\n\t\t\t\t\t\tlastDroppedItem: {\n\t\t\t\t\t\t\t$set: item,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdroppedBoxNames,\n\t\t\t}),\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Container from './Container'\n\nexport default class DustbinMultipleTargets extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>\n\t\t\t\t\t\t<a href=\"https://github.com/react-dnd/react-dnd/tree/master/packages/documentation/src/examples/01%20Dustbin/Multiple%20Targets\">\n\t\t\t\t\t\t\tBrowse the Source\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</b>\n\t\t\t\t</p>\n\t\t\t\t<p>This is a slightly more interesting example.</p>\n\t\t\t\t<p>\n\t\t\t\t\tIt demonstrates how a single drop target may accept multiple types,\n\t\t\t\t\tand how those types may be derived from props. It also demonstrates\n\t\t\t\t\tthe handling of native files and URLs (try dropping them onto the last\n\t\t\t\t\ttwo dustbins).\n\t\t\t\t</p>\n\t\t\t\t<Container />\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Example from '../../../examples/01 Dustbin/Multiple Targets'\nimport Layout from '../../../components/layout'\n\nexport default (props: any) => (\n\t<Layout {...props}>\n\t\t<Example />\n\t</Layout>\n)\n","var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\n\nvar toString = Object.prototype.toString\nvar type = function(obj) {\n  return toString.call(obj).slice(8, -1);\n}\n\nvar assign = Object.assign || /* istanbul ignore next */ function assign(target, source) {\n  getAllKeys(source).forEach(function(key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ?\n  function(obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)) } :\n  /* istanbul ignore next */ function(obj) { return Object.keys(obj) };\n\n/* istanbul ignore next */\nfunction copy(object) {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object)\n  } else if (type(object) === 'Map') {\n    return new Map(object)\n  } else if (type(object) === 'Set') {\n    return new Set(object)\n  } else if (object && typeof object === 'object') {\n    var prototype = Object.getPrototypeOf(object);\n    return assign(Object.create(prototype), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n  update.extend = function(directive, fn) {\n    commands[directive] = fn;\n  };\n  update.isEquals = function(a, b) { return a === b; };\n\n  return update;\n\n  function update(object, spec) {\n    if (typeof spec === 'function') {\n      spec = { $apply: spec };\n    }\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(\n        !Array.isArray(spec),\n        'update(): You provided an invalid spec to update(). The spec may ' +\n        'not contain an array except as the value of $set, $push, $unshift, ' +\n        '$splice or any custom command allowing an array value.'\n      );\n    }\n\n    invariant(\n      typeof spec === 'object' && spec !== null,\n      'update(): You provided an invalid spec to update(). The spec and ' +\n      'every included key path must be plain objects containing one of the ' +\n      'following commands: %s.',\n      Object.keys(commands).join(', ')\n    );\n\n    var nextObject = object;\n    var index, key;\n    getAllKeys(spec).forEach(function(key) {\n      if (hasOwnProperty.call(commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n        if (objectWasNextObject && update.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey =\n          type(object) === 'Map'\n            ? update(object.get(key), spec[key])\n            : update(object[key], spec[key]);\n        var nextObjectValue =\n          type(nextObject) === 'Map'\n              ? nextObject.get(key)\n              : nextObject[key];\n        if (!update.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    })\n    return nextObject;\n  }\n\n}\n\nvar defaultCommands = {\n  $push: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function(value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function(args) {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function(value, nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function(targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n\n    targets.forEach(function(target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n\n    return nextObjectCopy;\n  },\n  $unset: function(value, nextObject, spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function(key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n    if (type(nextObject) === 'Map') {\n      value.forEach(function(pair) {\n        var key = pair[0];\n        var value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach(function(value) {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n    return nextObject;\n  },\n  $remove: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function(key) {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function(value, nextObject, spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function(key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function(value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\n\nvar contextForExport = newContext();\n\nmodule.exports = contextForExport;\nmodule.exports.default = contextForExport;\nmodule.exports.newContext = newContext;\n\n// invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  invariantSpecArray(spec[command], command)\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(\n    Array.isArray(spec),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    spec\n  );\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(\n    Array.isArray(value),\n    'Expected $splice target to be an array; got %s',\n    value\n  );\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected spec of $splice to be an array of arrays; got %s. ' +\n    'Did you forget to wrap your parameters in an array?',\n    value\n  );\n}\n\nfunction invariantApply(fn) {\n  invariant(\n    typeof fn === 'function',\n    'update(): expected spec of $apply to be a function; got %s.',\n    fn\n  );\n}\n\nfunction invariantSet(spec) {\n  invariant(\n    Object.keys(spec).length === 1,\n    'Cannot have more than one key in an object with $set'\n  );\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(\n    specValue && typeof specValue === 'object',\n    'update(): $merge expects a spec of type \\'object\\'; got %s',\n    specValue\n  );\n  invariant(\n    target && typeof target === 'object',\n    'update(): $merge expects a target of type \\'object\\'; got %s',\n    target\n  );\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(\n    typeOfTarget === 'Map' || typeOfTarget === 'Set',\n    'update(): %s expects a target of type Set or Map; got %s',\n    command,\n    typeOfTarget\n  );\n}\n"],"sourceRoot":""}