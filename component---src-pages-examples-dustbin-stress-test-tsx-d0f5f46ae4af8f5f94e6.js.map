{"version":3,"sources":["webpack:///./src/examples/01 Dustbin/Stress Test/Dustbin.tsx","webpack:///./src/examples/01 Dustbin/Stress Test/Box.tsx","webpack:///./src/examples/01 Dustbin/Stress Test/ItemTypes.ts","webpack:///./src/examples/01 Dustbin/Stress Test/Container.tsx","webpack:///./src/examples/01 Dustbin/Stress Test/index.tsx","webpack:///./src/pages/examples/dustbin/stress-test.tsx","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/immutability-helper/index.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_shuffleSelf.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/shuffle.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_arrayShuffle.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_copyArray.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_baseRandom.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_baseShuffle.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/values.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_baseValues.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/keys.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_baseKeys.js","webpack:////Users/christrevino/Workspace/react-dnd/node_modules/lodash/_nativeKeys.js"],"names":["style","height","width","marginRight","marginBottom","color","padding","textAlign","fontSize","lineHeight","float","Dustbin","render","_this$props","this","props","accepts","isOver","canDrop","connectDropTarget","lastDroppedItem","isActive","backgroundColor","react","Object","assign","join","JSON","stringify","React","DropTarget","drop","monitor","onDrop","getItem","connect","dropTarget","border","cursor","Box","name","isDropped","isDragging","connectDragSource","opacity","DragSource","type","beginDrag","item","dragSource","ItemTypes","FOOD","GLASS","PAPER","update","require","shuffle","Container","_this","_React$Component","call","state","dustbins","NativeTypes","URL","FILE","boxes","droppedBoxNames","componentDidMount","_this2","interval","setInterval","tickTock","setState","componentWillUnmount","clearInterval","boxName","indexOf","_this3","_this$state","overflow","clear","map","_ref","index","Stress_Test_Dustbin","handleDrop","key","_ref2","Stress_Test_Box","_dustbins","$set","$push","DustbinStressTest","href","Container_Container","__webpack_exports__","layout","Stress_Test_DustbinStressTest","invariant","__webpack_require__","hasOwnProperty","prototype","splice","Array","toString","obj","slice","target","source","getAllKeys","forEach","getOwnPropertySymbols","keys","concat","copy","object","isArray","constructor","length","Map","Set","getPrototypeOf","create","newContext","commands","defaultCommands","extend","directive","fn","isEquals","a","b","spec","$apply","nextObject","objectWasNextObject","nextValueForKey","get","nextObjectValue","set","value","invariantPushAndUnshift","$unshift","$splice","originalObject","invariantSplice","invariantSplices","args","apply","invariantSet","$toggle","targets","invariantSpecArray","nextObjectCopy","$unset","$add","invariantMapOrSet","pair","has","add","$remove","delete","$merge","specValue","original","contextForExport","command","typeOfTarget","module","exports","default","baseRandom","array","size","lastIndex","undefined","rand","arrayShuffle","baseShuffle","collection","copyArray","shuffleSelf","nativeFloor","Math","floor","nativeRandom","random","lower","upper","values","baseValues","arrayMap","arrayLikeKeys","baseKeys","isArrayLike","isPrototype","nativeKeys","result","push","overArg"],"mappings":"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","file":"component---src-pages-examples-dustbin-stress-test-tsx-d0f5f46ae4af8f5f94e6.js","sourcesContent":["import * as React from 'react'\nimport {\n\tConnectDropTarget,\n\tDropTarget,\n\tDropTargetMonitor,\n\tDropTargetConnector,\n} from 'react-dnd'\n\nconst style: React.CSSProperties = {\n\theight: '12rem',\n\twidth: '12rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcolor: 'white',\n\tpadding: '1rem',\n\ttextAlign: 'center',\n\tfontSize: '1rem',\n\tlineHeight: 'normal',\n\tfloat: 'left',\n}\n\nconst dustbinTarget = {\n\tdrop(props: DustbinProps, monitor: DropTargetMonitor) {\n\t\tprops.onDrop(monitor.getItem())\n\t},\n}\n\nexport interface DustbinProps {\n\tconnectDropTarget?: ConnectDropTarget\n\tisOver?: boolean\n\tcanDrop?: boolean\n\tlastDroppedItem?: any\n\taccepts: string[]\n\tonDrop: (arg: any) => void\n}\n\nclass Dustbin extends React.Component<DustbinProps> {\n\tpublic render() {\n\t\tconst {\n\t\t\taccepts,\n\t\t\tisOver,\n\t\t\tcanDrop,\n\t\t\tconnectDropTarget,\n\t\t\tlastDroppedItem,\n\t\t} = this.props\n\t\tconst isActive = isOver && canDrop\n\n\t\tlet backgroundColor = '#222'\n\t\tif (isActive) {\n\t\t\tbackgroundColor = 'darkgreen'\n\t\t} else if (canDrop) {\n\t\t\tbackgroundColor = 'darkkhaki'\n\t\t}\n\n\t\treturn (\n\t\t\tconnectDropTarget &&\n\t\t\tconnectDropTarget(\n\t\t\t\t<div style={{ ...style, backgroundColor }}>\n\t\t\t\t\t{isActive\n\t\t\t\t\t\t? 'Release to drop'\n\t\t\t\t\t\t: `This dustbin accepts: ${accepts.join(', ')}`}\n\n\t\t\t\t\t{lastDroppedItem && (\n\t\t\t\t\t\t<p>Last dropped: {JSON.stringify(lastDroppedItem)}</p>\n\t\t\t\t\t)}\n\t\t\t\t</div>,\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DropTarget(\n\t(props: DustbinProps) => props.accepts,\n\tdustbinTarget,\n\t(connect: DropTargetConnector, monitor: DropTargetMonitor) => ({\n\t\tconnectDropTarget: connect.dropTarget(),\n\t\tisOver: monitor.isOver(),\n\t\tcanDrop: monitor.canDrop(),\n\t}),\n)(Dustbin)\n","import * as React from 'react'\nimport {\n\tDragSource,\n\tDragSourceConnector,\n\tDragSourceMonitor,\n\tConnectDragSource,\n} from 'react-dnd'\n\nconst style: React.CSSProperties = {\n\tborder: '1px dashed gray',\n\tbackgroundColor: 'white',\n\tpadding: '0.5rem 1rem',\n\tmarginRight: '1.5rem',\n\tmarginBottom: '1.5rem',\n\tcursor: 'move',\n\tfloat: 'left',\n}\n\nconst boxSource = {\n\tbeginDrag(props: BoxProps) {\n\t\treturn {\n\t\t\tname: props.name,\n\t\t}\n\t},\n\n\tisDragging(props: BoxProps, monitor: DragSourceMonitor) {\n\t\tconst item = monitor.getItem()\n\t\treturn props.name === item.name\n\t},\n}\n\nexport interface BoxProps {\n\tname: string\n\ttype: string\n\tisDropped?: boolean\n\tisDragging?: boolean\n\tconnectDragSource?: ConnectDragSource\n}\n\nclass Box extends React.Component<BoxProps> {\n\tpublic render() {\n\t\tconst { name, isDropped, isDragging, connectDragSource } = this.props\n\t\tconst opacity = isDragging ? 0.4 : 1\n\n\t\treturn (\n\t\t\tconnectDragSource &&\n\t\t\tconnectDragSource(\n\t\t\t\t<div style={{ ...style, opacity }}>\n\t\t\t\t\t{isDropped ? <s>{name}</s> : name}\n\t\t\t\t</div>,\n\t\t\t)\n\t\t)\n\t}\n}\n\nexport default DragSource(\n\t(props: BoxProps) => props.type,\n\tboxSource,\n\t(connect: DragSourceConnector, monitor: DragSourceMonitor) => ({\n\t\tconnectDragSource: connect.dragSource(),\n\t\tisDragging: monitor.isDragging(),\n\t}),\n)(Box)\n","export default {\n\tFOOD: 'food',\n\tGLASS: 'glass',\n\tPAPER: 'paper',\n}\n","// tslint:disable jsx-no-lambda\nimport * as React from 'react'\nimport { NativeTypes } from 'react-dnd-html5-backend'\nimport Dustbin from './Dustbin'\nimport Box from './Box'\nimport ItemTypes from './ItemTypes'\nconst update = require('immutability-helper')\nconst shuffle = require('lodash/shuffle')\n\nexport interface SourceBox {\n\tname: string\n\ttype: string\n}\n\nexport interface DustbinBox {\n\taccepts: string[]\n\tlastDroppedItem: any\n}\n\nexport interface ContainerState {\n\tboxes: SourceBox[]\n\tdustbins: DustbinBox[]\n\tdroppedBoxNames: string[]\n}\nexport default class Container extends React.Component<{}, ContainerState> {\n\tprivate interval: any\n\n\tconstructor(props: {}) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tdustbins: [\n\t\t\t\t{ accepts: [ItemTypes.GLASS], lastDroppedItem: null },\n\t\t\t\t{ accepts: [ItemTypes.FOOD], lastDroppedItem: null },\n\t\t\t\t{\n\t\t\t\t\taccepts: [ItemTypes.PAPER, ItemTypes.GLASS, NativeTypes.URL],\n\t\t\t\t\tlastDroppedItem: null,\n\t\t\t\t},\n\t\t\t\t{ accepts: [ItemTypes.PAPER, NativeTypes.FILE], lastDroppedItem: null },\n\t\t\t],\n\t\t\tboxes: [\n\t\t\t\t{ name: 'Bottle', type: ItemTypes.GLASS },\n\t\t\t\t{ name: 'Banana', type: ItemTypes.FOOD },\n\t\t\t\t{ name: 'Magazine', type: ItemTypes.PAPER },\n\t\t\t],\n\t\t\tdroppedBoxNames: [],\n\t\t}\n\t}\n\n\tpublic componentDidMount() {\n\t\tthis.interval = setInterval(() => this.tickTock(), 1000)\n\t}\n\n\tpublic tickTock() {\n\t\tthis.setState({\n\t\t\tboxes: shuffle(this.state.boxes),\n\t\t\tdustbins: shuffle(this.state.dustbins),\n\t\t})\n\t}\n\n\tpublic componentWillUnmount() {\n\t\tclearInterval(this.interval)\n\t}\n\n\tpublic isDropped(boxName: string) {\n\t\treturn this.state.droppedBoxNames.indexOf(boxName) > -1\n\t}\n\n\tpublic render() {\n\t\tconst { boxes, dustbins } = this.state\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t{dustbins.map(({ accepts, lastDroppedItem }, index) => (\n\t\t\t\t\t\t<Dustbin\n\t\t\t\t\t\t\taccepts={accepts}\n\t\t\t\t\t\t\tlastDroppedItem={lastDroppedItem}\n\t\t\t\t\t\t\tonDrop={item => this.handleDrop(index, item)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{ overflow: 'hidden', clear: 'both' }}>\n\t\t\t\t\t{boxes.map(({ name, type }, index) => (\n\t\t\t\t\t\t<Box\n\t\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\tisDropped={this.isDropped(name)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t)\n\t}\n\n\tpublic handleDrop(index: number, item: { name: string }) {\n\t\tconst { name } = item\n\n\t\tthis.setState(\n\t\t\tupdate(this.state, {\n\t\t\t\tdustbins: {\n\t\t\t\t\t[index]: {\n\t\t\t\t\t\tlastDroppedItem: {\n\t\t\t\t\t\t\t$set: item,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdroppedBoxNames: name\n\t\t\t\t\t? {\n\t\t\t\t\t\t\t$push: [name],\n\t\t\t\t\t  }\n\t\t\t\t\t: {},\n\t\t\t}),\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Container from './Container'\n\nexport default class DustbinStressTest extends React.Component {\n\tpublic render() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>\n\t\t\t\t\t<b>\n\t\t\t\t\t\t<a href=\"https://github.com/react-dnd/react-dnd/tree/master/packages/documentation/src/examples/01%20Dustbin/Stress%20Test\">\n\t\t\t\t\t\t\tBrowse the Source\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</b>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\tThis example is similar to the previous one, but props of both the\n\t\t\t\t\tdrag sources and the drop targets change every second. It demonstrates\n\t\t\t\t\tthat React DnD keeps track of the changing props, and if a component\n\t\t\t\t\treceives the new props, React DnD recalculates the drag and drop\n\t\t\t\t\tstate. It also shows how a custom <code>isDragging</code>{' '}\n\t\t\t\t\timplementation can make the drag source appear as dragged, even if the\n\t\t\t\t\tcomponent that initiated the drag has received new props.\n\t\t\t\t</p>\n\t\t\t\t<Container />\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import * as React from 'react'\nimport Example from '../../../examples/01 Dustbin/Stress Test'\nimport Layout from '../../../components/layout'\n\nexport default (props: any) => (\n\t<Layout {...props}>\n\t\t<Example />\n\t</Layout>\n)\n","var invariant = require('invariant');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar splice = Array.prototype.splice;\n\nvar toString = Object.prototype.toString\nvar type = function(obj) {\n  return toString.call(obj).slice(8, -1);\n}\n\nvar assign = Object.assign || /* istanbul ignore next */ function assign(target, source) {\n  getAllKeys(source).forEach(function(key) {\n    if (hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  });\n  return target;\n};\n\nvar getAllKeys = typeof Object.getOwnPropertySymbols === 'function' ?\n  function(obj) { return Object.keys(obj).concat(Object.getOwnPropertySymbols(obj)) } :\n  /* istanbul ignore next */ function(obj) { return Object.keys(obj) };\n\n/* istanbul ignore next */\nfunction copy(object) {\n  if (Array.isArray(object)) {\n    return assign(object.constructor(object.length), object)\n  } else if (type(object) === 'Map') {\n    return new Map(object)\n  } else if (type(object) === 'Set') {\n    return new Set(object)\n  } else if (object && typeof object === 'object') {\n    var prototype = Object.getPrototypeOf(object);\n    return assign(Object.create(prototype), object);\n  } else {\n    return object;\n  }\n}\n\nfunction newContext() {\n  var commands = assign({}, defaultCommands);\n  update.extend = function(directive, fn) {\n    commands[directive] = fn;\n  };\n  update.isEquals = function(a, b) { return a === b; };\n\n  return update;\n\n  function update(object, spec) {\n    if (typeof spec === 'function') {\n      spec = { $apply: spec };\n    }\n\n    if (!(Array.isArray(object) && Array.isArray(spec))) {\n      invariant(\n        !Array.isArray(spec),\n        'update(): You provided an invalid spec to update(). The spec may ' +\n        'not contain an array except as the value of $set, $push, $unshift, ' +\n        '$splice or any custom command allowing an array value.'\n      );\n    }\n\n    invariant(\n      typeof spec === 'object' && spec !== null,\n      'update(): You provided an invalid spec to update(). The spec and ' +\n      'every included key path must be plain objects containing one of the ' +\n      'following commands: %s.',\n      Object.keys(commands).join(', ')\n    );\n\n    var nextObject = object;\n    var index, key;\n    getAllKeys(spec).forEach(function(key) {\n      if (hasOwnProperty.call(commands, key)) {\n        var objectWasNextObject = object === nextObject;\n        nextObject = commands[key](spec[key], nextObject, spec, object);\n        if (objectWasNextObject && update.isEquals(nextObject, object)) {\n          nextObject = object;\n        }\n      } else {\n        var nextValueForKey =\n          type(object) === 'Map'\n            ? update(object.get(key), spec[key])\n            : update(object[key], spec[key]);\n        var nextObjectValue =\n          type(nextObject) === 'Map'\n              ? nextObject.get(key)\n              : nextObject[key];\n        if (!update.isEquals(nextValueForKey, nextObjectValue) || typeof nextValueForKey === 'undefined' && !hasOwnProperty.call(object, key)) {\n          if (nextObject === object) {\n            nextObject = copy(object);\n          }\n          if (type(nextObject) === 'Map') {\n            nextObject.set(key, nextValueForKey);\n          } else {\n            nextObject[key] = nextValueForKey;\n          }\n        }\n      }\n    })\n    return nextObject;\n  }\n\n}\n\nvar defaultCommands = {\n  $push: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$push');\n    return value.length ? nextObject.concat(value) : nextObject;\n  },\n  $unshift: function(value, nextObject, spec) {\n    invariantPushAndUnshift(nextObject, spec, '$unshift');\n    return value.length ? value.concat(nextObject) : nextObject;\n  },\n  $splice: function(value, nextObject, spec, originalObject) {\n    invariantSplices(nextObject, spec);\n    value.forEach(function(args) {\n      invariantSplice(args);\n      if (nextObject === originalObject && args.length) nextObject = copy(originalObject);\n      splice.apply(nextObject, args);\n    });\n    return nextObject;\n  },\n  $set: function(value, nextObject, spec) {\n    invariantSet(spec);\n    return value;\n  },\n  $toggle: function(targets, nextObject) {\n    invariantSpecArray(targets, '$toggle');\n    var nextObjectCopy = targets.length ? copy(nextObject) : nextObject;\n\n    targets.forEach(function(target) {\n      nextObjectCopy[target] = !nextObject[target];\n    });\n\n    return nextObjectCopy;\n  },\n  $unset: function(value, nextObject, spec, originalObject) {\n    invariantSpecArray(value, '$unset');\n    value.forEach(function(key) {\n      if (Object.hasOwnProperty.call(nextObject, key)) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        delete nextObject[key];\n      }\n    });\n    return nextObject;\n  },\n  $add: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$add');\n    invariantSpecArray(value, '$add');\n    if (type(nextObject) === 'Map') {\n      value.forEach(function(pair) {\n        var key = pair[0];\n        var value = pair[1];\n        if (nextObject === originalObject && nextObject.get(key) !== value) nextObject = copy(originalObject);\n        nextObject.set(key, value);\n      });\n    } else {\n      value.forEach(function(value) {\n        if (nextObject === originalObject && !nextObject.has(value)) nextObject = copy(originalObject);\n        nextObject.add(value);\n      });\n    }\n    return nextObject;\n  },\n  $remove: function(value, nextObject, spec, originalObject) {\n    invariantMapOrSet(nextObject, '$remove');\n    invariantSpecArray(value, '$remove');\n    value.forEach(function(key) {\n      if (nextObject === originalObject && nextObject.has(key)) nextObject = copy(originalObject);\n      nextObject.delete(key);\n    });\n    return nextObject;\n  },\n  $merge: function(value, nextObject, spec, originalObject) {\n    invariantMerge(nextObject, value);\n    getAllKeys(value).forEach(function(key) {\n      if (value[key] !== nextObject[key]) {\n        if (nextObject === originalObject) nextObject = copy(originalObject);\n        nextObject[key] = value[key];\n      }\n    });\n    return nextObject;\n  },\n  $apply: function(value, original) {\n    invariantApply(value);\n    return value(original);\n  }\n};\n\nvar contextForExport = newContext();\n\nmodule.exports = contextForExport;\nmodule.exports.default = contextForExport;\nmodule.exports.newContext = newContext;\n\n// invariants\n\nfunction invariantPushAndUnshift(value, spec, command) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected target of %s to be an array; got %s.',\n    command,\n    value\n  );\n  invariantSpecArray(spec[command], command)\n}\n\nfunction invariantSpecArray(spec, command) {\n  invariant(\n    Array.isArray(spec),\n    'update(): expected spec of %s to be an array; got %s. ' +\n    'Did you forget to wrap your parameter in an array?',\n    command,\n    spec\n  );\n}\n\nfunction invariantSplices(value, spec) {\n  invariant(\n    Array.isArray(value),\n    'Expected $splice target to be an array; got %s',\n    value\n  );\n  invariantSplice(spec['$splice']);\n}\n\nfunction invariantSplice(value) {\n  invariant(\n    Array.isArray(value),\n    'update(): expected spec of $splice to be an array of arrays; got %s. ' +\n    'Did you forget to wrap your parameters in an array?',\n    value\n  );\n}\n\nfunction invariantApply(fn) {\n  invariant(\n    typeof fn === 'function',\n    'update(): expected spec of $apply to be a function; got %s.',\n    fn\n  );\n}\n\nfunction invariantSet(spec) {\n  invariant(\n    Object.keys(spec).length === 1,\n    'Cannot have more than one key in an object with $set'\n  );\n}\n\nfunction invariantMerge(target, specValue) {\n  invariant(\n    specValue && typeof specValue === 'object',\n    'update(): $merge expects a spec of type \\'object\\'; got %s',\n    specValue\n  );\n  invariant(\n    target && typeof target === 'object',\n    'update(): $merge expects a target of type \\'object\\'; got %s',\n    target\n  );\n}\n\nfunction invariantMapOrSet(target, command) {\n  var typeOfTarget = type(target);\n  invariant(\n    typeOfTarget === 'Map' || typeOfTarget === 'Set',\n    'update(): %s expects a target of type Set or Map; got %s',\n    command,\n    typeOfTarget\n  );\n}\n","var baseRandom = require('./_baseRandom');\n\n/**\n * A specialized version of `_.shuffle` which mutates and sets the size of `array`.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @param {number} [size=array.length] The size of `array`.\n * @returns {Array} Returns `array`.\n */\nfunction shuffleSelf(array, size) {\n  var index = -1,\n      length = array.length,\n      lastIndex = length - 1;\n\n  size = size === undefined ? length : size;\n  while (++index < size) {\n    var rand = baseRandom(index, lastIndex),\n        value = array[rand];\n\n    array[rand] = array[index];\n    array[index] = value;\n  }\n  array.length = size;\n  return array;\n}\n\nmodule.exports = shuffleSelf;\n","var arrayShuffle = require('./_arrayShuffle'),\n    baseShuffle = require('./_baseShuffle'),\n    isArray = require('./isArray');\n\n/**\n * Creates an array of shuffled values, using a version of the\n * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n * @example\n *\n * _.shuffle([1, 2, 3, 4]);\n * // => [4, 1, 3, 2]\n */\nfunction shuffle(collection) {\n  var func = isArray(collection) ? arrayShuffle : baseShuffle;\n  return func(collection);\n}\n\nmodule.exports = shuffle;\n","var copyArray = require('./_copyArray'),\n    shuffleSelf = require('./_shuffleSelf');\n\n/**\n * A specialized version of `_.shuffle` for arrays.\n *\n * @private\n * @param {Array} array The array to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction arrayShuffle(array) {\n  return shuffleSelf(copyArray(array));\n}\n\nmodule.exports = arrayShuffle;\n","/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n","/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeFloor = Math.floor,\n    nativeRandom = Math.random;\n\n/**\n * The base implementation of `_.random` without support for returning\n * floating-point numbers.\n *\n * @private\n * @param {number} lower The lower bound.\n * @param {number} upper The upper bound.\n * @returns {number} Returns the random number.\n */\nfunction baseRandom(lower, upper) {\n  return lower + nativeFloor(nativeRandom() * (upper - lower + 1));\n}\n\nmodule.exports = baseRandom;\n","var shuffleSelf = require('./_shuffleSelf'),\n    values = require('./values');\n\n/**\n * The base implementation of `_.shuffle`.\n *\n * @private\n * @param {Array|Object} collection The collection to shuffle.\n * @returns {Array} Returns the new shuffled array.\n */\nfunction baseShuffle(collection) {\n  return shuffleSelf(values(collection));\n}\n\nmodule.exports = baseShuffle;\n","var baseValues = require('./_baseValues'),\n    keys = require('./keys');\n\n/**\n * Creates an array of the own enumerable string keyed property values of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property values.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.values(new Foo);\n * // => [1, 2] (iteration order is not guaranteed)\n *\n * _.values('hi');\n * // => ['h', 'i']\n */\nfunction values(object) {\n  return object == null ? [] : baseValues(object, keys(object));\n}\n\nmodule.exports = values;\n","var arrayMap = require('./_arrayMap');\n\n/**\n * The base implementation of `_.values` and `_.valuesIn` which creates an\n * array of `object` property values corresponding to the property names\n * of `props`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} props The property names to get values for.\n * @returns {Object} Returns the array of property values.\n */\nfunction baseValues(object, props) {\n  return arrayMap(props, function(key) {\n    return object[key];\n  });\n}\n\nmodule.exports = baseValues;\n","var arrayLikeKeys = require('./_arrayLikeKeys'),\n    baseKeys = require('./_baseKeys'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\nmodule.exports = keys;\n","var isPrototype = require('./_isPrototype'),\n    nativeKeys = require('./_nativeKeys');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeys;\n","var overArg = require('./_overArg');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeKeys = overArg(Object.keys, Object);\n\nmodule.exports = nativeKeys;\n"],"sourceRoot":""}